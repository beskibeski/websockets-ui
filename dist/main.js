(()=>{"use strict";var e={148:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(852),i=r(s(784)),n="8181";console.log(`Start static http server on the ${n} port!`),o.httpServer.listen(n),i.default.start()},287:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentPlayerWithoutPassword=t.getCurrentPlayer=t.setCurrentPlayer=t.getPlayerIndex=t.checkPlayer=t.checkPassword=t.showPlayers=t.addPlayer=void 0;const s=[];let r;t.addPlayer=e=>{s.push(e)},t.showPlayers=()=>{console.log(s)},t.checkPlayer=e=>void 0!==s.find((t=>t.name===e.name)),t.checkPassword=e=>void 0!==s.find((t=>t.password===e.password)),t.getPlayerIndex=e=>{let t="";return s.filter((s=>{if(s.name===e.name)return t=s.index,s.index})),t},t.setCurrentPlayer=e=>{r=e};const o=()=>r;t.getCurrentPlayer=o,t.getCurrentPlayerWithoutPassword=()=>({name:o().name,index:o().index})},424:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentRoom=t.deleteRoom=t.addPlayerToRoom=t.addRoom=t.getRooms=void 0;const r=s(287);let o=[];t.getRooms=()=>o,t.addRoom=e=>{o.push(e)},t.addPlayerToRoom=()=>{o[0].roomUsers.push((0,r.getCurrentPlayerWithoutPassword)())},t.deleteRoom=()=>{o=[],console.log("Room deleted")},t.getCurrentRoom=()=>o[0]},476:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addWinToWinner=t.getWinners=t.addWinner=void 0;let s=[];t.addWinner=e=>{void 0===s.find((t=>t.name===e))&&s.push({name:e,wins:0})},t.addWinToWinner=e=>{s.map((t=>{t.name===e.name&&(t.wins+=1)}))},t.getWinners=()=>s},852:function(e,t,s){var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s);var o=Object.getOwnPropertyDescriptor(t,s);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,r,o)}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.httpServer=void 0;const n=i(s(58)),a=i(s(72)),c=i(s(136));t.httpServer=c.createServer((function(e,t){const s=a.resolve(a.dirname(""))+("/"===e.url?"/front/index.html":"/front"+e.url);n.readFile(s,(function(e,s){if(e)return t.writeHead(404),void t.end(JSON.stringify(e));t.writeHead(200),t.end(s)}))}))},980:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(s(968)),i=s(424),n=s(784);t.default=()=>{const e=[],t=o.default.randomUUID();(0,i.getCurrentRoom)().roomUsers.forEach((t=>{e.push(t.index)})),e.forEach((e=>{n.wsServer.clients.forEach((s=>{if(s.id===e){const r={idGame:t,idPlayer:e},o={type:"create_game",data:JSON.stringify(r),id:0};s.send(JSON.stringify(o))}}))})),console.log("Game created"),(0,i.deleteRoom)()}},448:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registrateNewPlayer=t.loginWithWrongPassword=t.login=void 0;const o=s(287),i=s(764),n=r(s(960)),a=(e,t)=>{const s={name:t.name,index:e.id,error:!1},r={type:"reg",data:JSON.stringify(s),id:0};console.log(`Login for player ${t.name} successful`),e.send(JSON.stringify(r)),(0,i.updateRoom)(e),(0,n.default)(e),(0,o.setCurrentPlayer)(t)};t.login=a,t.loginWithWrongPassword=(e,t)=>{const s={name:t.name,index:e.id,errorText:"Wrong login name or password",error:!0},r={type:"reg",data:JSON.stringify(s),id:0};console.log("Wrong credentials"),e.send(JSON.stringify(r))},t.registrateNewPlayer=(e,t)=>{t.index=e.id,(0,o.addPlayer)(t),console.log(`Registration of player ${t.name} is successful`),a(e,t)}},404:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=s(287),o=s(448),i=s(764);t.default=(e,t)=>{const s=JSON.parse(e.toString());switch((e=>e.type)(s)){case"reg":const e=JSON.parse(s.data);(0,r.checkPlayer)(e)&&(0,r.checkPassword)(e)?(0,o.login)(t,e):(0,r.checkPlayer)(e)?(0,o.loginWithWrongPassword)(t,e):(0,o.registrateNewPlayer)(t,e);break;case"create_room":(0,i.createRoom)(t);break;case"add_user_to_room":(0,i.addToRoom)(t);break;case"single_play":console.log(s.type)}}},764:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.addToRoom=t.updateRoom=t.createRoom=void 0;const o=s(424),i=r(s(980));t.createRoom=e=>{console.log("Room is created");const t={roomId:crypto.randomUUID(),roomUsers:[]};(0,o.addRoom)(t);const s={type:"update_room",data:JSON.stringify((0,o.getRooms)()),id:0};e.send(JSON.stringify(s))};const n=e=>{console.log("Rooms updated");const t={type:"update_room",data:JSON.stringify((0,o.getRooms)()),id:0};e.send(JSON.stringify(t))};t.updateRoom=n,t.addToRoom=e=>{console.log("Player is added to room"),(0,o.getRooms)()[0].roomUsers.length<1?((0,o.addPlayerToRoom)(),n(e)):((0,o.addPlayerToRoom)(),(0,i.default)())}},960:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=s(476);t.default=e=>{console.log("Winners updated");const t={type:"update_winners",data:JSON.stringify((0,r.getWinners)()),id:0};e.send(JSON.stringify(t))}},784:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.wsServer=void 0;const o=s(472),i=r(s(404)),n=r(s(968)),a=Number("3000");t.default={start(){const e=new o.WebSocketServer({port:a});t.wsServer=e,e.on("connection",((e,t)=>{console.log(`Websocket is started on ${Object.values(t.headers)[0]} with security key ${Object.values(t.headers)[10]}`),e.id=n.default.randomUUID(),e.on("message",(t=>{(0,i.default)(t,e)})),e.on("close",(()=>{console.log("Websocket is disconnected")}))}))}}},472:(e,t,s)=>{const r=s(144);r.createWebSocketStream=s(408),r.Server=s(796),r.Receiver=s(804),r.Sender=s(957),r.WebSocket=r,r.WebSocketServer=r.Server,e.exports=r},92:(e,t,s)=>{const{EMPTY_BUFFER:r}=s(820);function o(e,t,s,r,o){for(let i=0;i<o;i++)s[r+i]=e[i]^t[3&i]}function i(e,t){for(let s=0;s<e.length;s++)e[s]^=t[3&s]}if(e.exports={concat:function(e,t){if(0===e.length)return r;if(1===e.length)return e[0];const s=Buffer.allocUnsafe(t);let o=0;for(let t=0;t<e.length;t++){const r=e[t];s.set(r,o),o+=r.length}return o<t?s.slice(0,o):s},mask:o,toArrayBuffer:function(e){return e.byteLength===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)},toBuffer:function e(t){if(e.readOnly=!0,Buffer.isBuffer(t))return t;let s;return t instanceof ArrayBuffer?s=Buffer.from(t):ArrayBuffer.isView(t)?s=Buffer.from(t.buffer,t.byteOffset,t.byteLength):(s=Buffer.from(t),e.readOnly=!1),s},unmask:i},!process.env.WS_NO_BUFFER_UTIL)try{const t=s(Object(function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}()));e.exports.mask=function(e,s,r,i,n){n<48?o(e,s,r,i,n):t.mask(e,s,r,i,n)},e.exports.unmask=function(e,s){e.length<32?i(e,s):t.unmask(e,s)}}catch(e){}},820:e=>{e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],EMPTY_BUFFER:Buffer.alloc(0),GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kForOnEventAttribute:Symbol("kIsForOnEventAttribute"),kListener:Symbol("kListener"),kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),NOOP:()=>{}}},584:(e,t,s)=>{const{kForOnEventAttribute:r,kListener:o}=s(820),i=Symbol("kCode"),n=Symbol("kData"),a=Symbol("kError"),c=Symbol("kMessage"),h=Symbol("kReason"),l=Symbol("kTarget"),d=Symbol("kType"),f=Symbol("kWasClean");class u{constructor(e){this[l]=null,this[d]=e}get target(){return this[l]}get type(){return this[d]}}Object.defineProperty(u.prototype,"target",{enumerable:!0}),Object.defineProperty(u.prototype,"type",{enumerable:!0});class _ extends u{constructor(e,t={}){super(e),this[i]=void 0===t.code?0:t.code,this[h]=void 0===t.reason?"":t.reason,this[f]=void 0!==t.wasClean&&t.wasClean}get code(){return this[i]}get reason(){return this[h]}get wasClean(){return this[f]}}Object.defineProperty(_.prototype,"code",{enumerable:!0}),Object.defineProperty(_.prototype,"reason",{enumerable:!0}),Object.defineProperty(_.prototype,"wasClean",{enumerable:!0});class p extends u{constructor(e,t={}){super(e),this[a]=void 0===t.error?null:t.error,this[c]=void 0===t.message?"":t.message}get error(){return this[a]}get message(){return this[c]}}Object.defineProperty(p.prototype,"error",{enumerable:!0}),Object.defineProperty(p.prototype,"message",{enumerable:!0});class m extends u{constructor(e,t={}){super(e),this[n]=void 0===t.data?null:t.data}get data(){return this[n]}}Object.defineProperty(m.prototype,"data",{enumerable:!0});const y={addEventListener(e,t,s={}){let i;if("message"===e)i=function(e,s){const r=new m("message",{data:s?e:e.toString()});r[l]=this,t.call(this,r)};else if("close"===e)i=function(e,s){const r=new _("close",{code:e,reason:s.toString(),wasClean:this._closeFrameReceived&&this._closeFrameSent});r[l]=this,t.call(this,r)};else if("error"===e)i=function(e){const s=new p("error",{error:e,message:e.message});s[l]=this,t.call(this,s)};else{if("open"!==e)return;i=function(){const e=new u("open");e[l]=this,t.call(this,e)}}i[r]=!!s[r],i[o]=t,s.once?this.once(e,i):this.on(e,i)},removeEventListener(e,t){for(const s of this.listeners(e))if(s[o]===t&&!s[r]){this.removeListener(e,s);break}}};e.exports={CloseEvent:_,ErrorEvent:p,Event:u,EventTarget:y,MessageEvent:m}},56:(e,t,s)=>{const{tokenChars:r}=s(708);function o(e,t,s){void 0===e[t]?e[t]=[s]:e[t].push(s)}e.exports={format:function(e){return Object.keys(e).map((t=>{let s=e[t];return Array.isArray(s)||(s=[s]),s.map((e=>[t].concat(Object.keys(e).map((t=>{let s=e[t];return Array.isArray(s)||(s=[s]),s.map((e=>!0===e?t:`${t}=${e}`)).join("; ")}))).join("; "))).join(", ")})).join(", ")},parse:function(e){const t=Object.create(null);let s,i,n=Object.create(null),a=!1,c=!1,h=!1,l=-1,d=-1,f=-1,u=0;for(;u<e.length;u++)if(d=e.charCodeAt(u),void 0===s)if(-1===f&&1===r[d])-1===l&&(l=u);else if(0===u||32!==d&&9!==d){if(59!==d&&44!==d)throw new SyntaxError(`Unexpected character at index ${u}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${u}`);-1===f&&(f=u);const r=e.slice(l,f);44===d?(o(t,r,n),n=Object.create(null)):s=r,l=f=-1}}else-1===f&&-1!==l&&(f=u);else if(void 0===i)if(-1===f&&1===r[d])-1===l&&(l=u);else if(32===d||9===d)-1===f&&-1!==l&&(f=u);else if(59===d||44===d){if(-1===l)throw new SyntaxError(`Unexpected character at index ${u}`);-1===f&&(f=u),o(n,e.slice(l,f),!0),44===d&&(o(t,s,n),n=Object.create(null),s=void 0),l=f=-1}else{if(61!==d||-1===l||-1!==f)throw new SyntaxError(`Unexpected character at index ${u}`);i=e.slice(l,u),l=f=-1}else if(c){if(1!==r[d])throw new SyntaxError(`Unexpected character at index ${u}`);-1===l?l=u:a||(a=!0),c=!1}else if(h)if(1===r[d])-1===l&&(l=u);else if(34===d&&-1!==l)h=!1,f=u;else{if(92!==d)throw new SyntaxError(`Unexpected character at index ${u}`);c=!0}else if(34===d&&61===e.charCodeAt(u-1))h=!0;else if(-1===f&&1===r[d])-1===l&&(l=u);else if(-1===l||32!==d&&9!==d){if(59!==d&&44!==d)throw new SyntaxError(`Unexpected character at index ${u}`);{if(-1===l)throw new SyntaxError(`Unexpected character at index ${u}`);-1===f&&(f=u);let r=e.slice(l,f);a&&(r=r.replace(/\\/g,""),a=!1),o(n,i,r),44===d&&(o(t,s,n),n=Object.create(null),s=void 0),i=void 0,l=f=-1}}else-1===f&&(f=u);if(-1===l||h||32===d||9===d)throw new SyntaxError("Unexpected end of input");-1===f&&(f=u);const _=e.slice(l,f);return void 0===s?o(t,_,n):(void 0===i?o(n,_,!0):o(n,i,a?_.replace(/\\/g,""):_),o(t,s,n)),t}}},156:e=>{const t=Symbol("kDone"),s=Symbol("kRun");e.exports=class{constructor(e){this[t]=()=>{this.pending--,this[s]()},this.concurrency=e||1/0,this.jobs=[],this.pending=0}add(e){this.jobs.push(e),this[s]()}[s](){if(this.pending!==this.concurrency&&this.jobs.length){const e=this.jobs.shift();this.pending++,e(this[t])}}}},516:(e,t,s)=>{const r=s(592),o=s(92),i=s(156),{kStatusCode:n}=s(820),a=Buffer.from([0,0,255,255]),c=Symbol("permessage-deflate"),h=Symbol("total-length"),l=Symbol("callback"),d=Symbol("buffers"),f=Symbol("error");let u;function _(e){this[d].push(e),this[h]+=e.length}function p(e){this[h]+=e.length,this[c]._maxPayload<1||this[h]<=this[c]._maxPayload?this[d].push(e):(this[f]=new RangeError("Max payload size exceeded"),this[f].code="WS_ERR_UNSUPPORTED_MESSAGE_LENGTH",this[f][n]=1009,this.removeListener("data",p),this.reset())}function m(e){this[c]._inflate=null,e[n]=1007,this[l](e)}e.exports=class{constructor(e,t,s){if(this._maxPayload=0|s,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!u){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;u=new i(e)}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){if(this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate){const e=this._deflate[l];this._deflate.close(),this._deflate=null,e&&e(new Error("The deflate stream was closed while data was being processed"))}}acceptAsServer(e){const t=this._options,s=e.find((e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits)));if(!s)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(s.server_no_context_takeover=!0),t.clientNoContextTakeover&&(s.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(s.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?s.client_max_window_bits=t.clientMaxWindowBits:!0!==s.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete s.client_max_window_bits,s}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach((e=>{Object.keys(e).forEach((t=>{let s=e[t];if(s.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(s=s[0],"client_max_window_bits"===t){if(!0!==s){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}else if("server_max_window_bits"===t){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==s)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}e[t]=s}))})),e}decompress(e,t,s){u.add((r=>{this._decompress(e,t,((e,t)=>{r(),s(e,t)}))}))}compress(e,t,s){u.add((r=>{this._compress(e,t,((e,t)=>{r(),s(e,t)}))}))}_decompress(e,t,s){const i=this._isServer?"client":"server";if(!this._inflate){const e=`${i}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=r.createInflateRaw({...this._options.zlibInflateOptions,windowBits:t}),this._inflate[c]=this,this._inflate[h]=0,this._inflate[d]=[],this._inflate.on("error",m),this._inflate.on("data",p)}this._inflate[l]=s,this._inflate.write(e),t&&this._inflate.write(a),this._inflate.flush((()=>{const e=this._inflate[f];if(e)return this._inflate.close(),this._inflate=null,void s(e);const r=o.concat(this._inflate[d],this._inflate[h]);this._inflate._readableState.endEmitted?(this._inflate.close(),this._inflate=null):(this._inflate[h]=0,this._inflate[d]=[],t&&this.params[`${i}_no_context_takeover`]&&this._inflate.reset()),s(null,r)}))}_compress(e,t,s){const i=this._isServer?"server":"client";if(!this._deflate){const e=`${i}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=r.createDeflateRaw({...this._options.zlibDeflateOptions,windowBits:t}),this._deflate[h]=0,this._deflate[d]=[],this._deflate.on("data",_)}this._deflate[l]=s,this._deflate.write(e),this._deflate.flush(r.Z_SYNC_FLUSH,(()=>{if(!this._deflate)return;let e=o.concat(this._deflate[d],this._deflate[h]);t&&(e=e.slice(0,e.length-4)),this._deflate[l]=null,this._deflate[h]=0,this._deflate[d]=[],t&&this.params[`${i}_no_context_takeover`]&&this._deflate.reset(),s(null,e)}))}}},804:(e,t,s)=>{const{Writable:r}=s(378),o=s(516),{BINARY_TYPES:i,EMPTY_BUFFER:n,kStatusCode:a,kWebSocket:c}=s(820),{concat:h,toArrayBuffer:l,unmask:d}=s(92),{isValidStatusCode:f,isValidUTF8:u}=s(708);function _(e,t,s,r,o){const i=new e(s?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(i,_),i.code=o,i[a]=r,i}e.exports=class extends r{constructor(e={}){super(),this._binaryType=e.binaryType||i[0],this._extensions=e.extensions||{},this._isServer=!!e.isServer,this._maxPayload=0|e.maxPayload,this._skipUTF8Validation=!!e.skipUTF8Validation,this[c]=void 0,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._state=0,this._loop=!1}_write(e,t,s){if(8===this._opcode&&0==this._state)return s();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(s)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=t.slice(e),t.slice(0,e)}const t=Buffer.allocUnsafe(e);do{const s=this._buffers[0],r=t.length-e;e>=s.length?t.set(this._buffers.shift(),r):(t.set(new Uint8Array(s.buffer,s.byteOffset,e),r),this._buffers[0]=s.slice(e)),e-=s.length}while(e>0);return t}startLoop(e){let t;this._loop=!0;do{switch(this._state){case 0:t=this.getInfo();break;case 1:t=this.getPayloadLength16();break;case 2:t=this.getPayloadLength64();break;case 3:this.getMask();break;case 4:t=this.getData(e);break;default:return void(this._loop=!1)}}while(this._loop);e(t)}getInfo(){if(this._bufferedBytes<2)return void(this._loop=!1);const e=this.consume(2);if(0!=(48&e[0]))return this._loop=!1,_(RangeError,"RSV2 and RSV3 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_2_3");const t=64==(64&e[0]);if(t&&!this._extensions[o.extensionName])return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1");if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1");if(!this._fragmented)return this._loop=!1,_(RangeError,"invalid opcode 0",!0,1002,"WS_ERR_INVALID_OPCODE");this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return this._loop=!1,_(RangeError,`invalid opcode ${this._opcode}`,!0,1002,"WS_ERR_INVALID_OPCODE");this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return this._loop=!1,_(RangeError,`invalid opcode ${this._opcode}`,!0,1002,"WS_ERR_INVALID_OPCODE");if(!this._fin)return this._loop=!1,_(RangeError,"FIN must be set",!0,1002,"WS_ERR_EXPECTED_FIN");if(t)return this._loop=!1,_(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1");if(this._payloadLength>125)return this._loop=!1,_(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002,"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH")}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),this._isServer){if(!this._masked)return this._loop=!1,_(RangeError,"MASK must be set",!0,1002,"WS_ERR_EXPECTED_MASK")}else if(this._masked)return this._loop=!1,_(RangeError,"MASK must be clear",!0,1002,"WS_ERR_UNEXPECTED_MASK");if(126===this._payloadLength)this._state=1;else{if(127!==this._payloadLength)return this.haveLength();this._state=2}}getPayloadLength16(){if(!(this._bufferedBytes<2))return this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength();this._loop=!1}getPayloadLength64(){if(this._bufferedBytes<8)return void(this._loop=!1);const e=this.consume(8),t=e.readUInt32BE(0);return t>Math.pow(2,21)-1?(this._loop=!1,_(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009,"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH")):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4),this.haveLength())}haveLength(){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0))return this._loop=!1,_(RangeError,"Max payload size exceeded",!1,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");this._masked?this._state=3:this._state=4}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=4)}getData(e){let t=n;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&0!=(this._mask[0]|this._mask[1]|this._mask[2]|this._mask[3])&&d(t,this._mask)}return this._opcode>7?this.controlMessage(t):this._compressed?(this._state=5,void this.decompress(t,e)):(t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage())}decompress(e,t){this._extensions[o.extensionName].decompress(e,this._fin,((e,s)=>{if(e)return t(e);if(s.length){if(this._messageLength+=s.length,this._messageLength>this._maxPayload&&this._maxPayload>0)return t(_(RangeError,"Max payload size exceeded",!1,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"));this._fragments.push(s)}const r=this.dataMessage();if(r)return t(r);this.startLoop(t)}))}dataMessage(){if(this._fin){const e=this._messageLength,t=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){let s;s="nodebuffer"===this._binaryType?h(t,e):"arraybuffer"===this._binaryType?l(h(t,e)):t,this.emit("message",s,!0)}else{const s=h(t,e);if(!this._skipUTF8Validation&&!u(s))return this._loop=!1,_(Error,"invalid UTF-8 sequence",!0,1007,"WS_ERR_INVALID_UTF8");this.emit("message",s,!1)}}this._state=0}controlMessage(e){if(8===this._opcode)if(this._loop=!1,0===e.length)this.emit("conclude",1005,n),this.end();else{if(1===e.length)return _(RangeError,"invalid payload length 1",!0,1002,"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");{const t=e.readUInt16BE(0);if(!f(t))return _(RangeError,`invalid status code ${t}`,!0,1002,"WS_ERR_INVALID_CLOSE_CODE");const s=e.slice(2);if(!this._skipUTF8Validation&&!u(s))return _(Error,"invalid UTF-8 sequence",!0,1007,"WS_ERR_INVALID_UTF8");this.emit("conclude",t,s),this.end()}}else 9===this._opcode?this.emit("ping",e):this.emit("pong",e);this._state=0}}},957:(e,t,s)=>{s(872),s(192);const{randomFillSync:r}=s(968),o=s(516),{EMPTY_BUFFER:i}=s(820),{isValidStatusCode:n}=s(708),{mask:a,toBuffer:c}=s(92),h=Symbol("kByteLength"),l=Buffer.alloc(4);class d{constructor(e,t,s){this._extensions=t||{},s&&(this._generateMask=s,this._maskBuffer=Buffer.alloc(4)),this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){let s,o,i=!1,n=2,c=!1;t.mask&&(s=t.maskBuffer||l,t.generateMask?t.generateMask(s):r(s,0,4),c=0==(s[0]|s[1]|s[2]|s[3]),n=6),"string"==typeof e?o=t.mask&&!c||void 0===t[h]?(e=Buffer.from(e)).length:t[h]:(o=e.length,i=t.mask&&t.readOnly&&!c);let d=o;o>=65536?(n+=8,d=127):o>125&&(n+=2,d=126);const f=Buffer.allocUnsafe(i?o+n:n);return f[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(f[0]|=64),f[1]=d,126===d?f.writeUInt16BE(o,2):127===d&&(f[2]=f[3]=0,f.writeUIntBE(o,4,6)),t.mask?(f[1]|=128,f[n-4]=s[0],f[n-3]=s[1],f[n-2]=s[2],f[n-1]=s[3],c?[f,e]:i?(a(e,s,f,n,o),[f]):(a(e,s,e,0,o),[f,e])):[f,e]}close(e,t,s,r){let o;if(void 0===e)o=i;else{if("number"!=typeof e||!n(e))throw new TypeError("First argument must be a valid error code number");if(void 0!==t&&t.length){const s=Buffer.byteLength(t);if(s>123)throw new RangeError("The message must not be greater than 123 bytes");o=Buffer.allocUnsafe(2+s),o.writeUInt16BE(e,0),"string"==typeof t?o.write(t,2):o.set(t,2)}else o=Buffer.allocUnsafe(2),o.writeUInt16BE(e,0)}const a={[h]:o.length,fin:!0,generateMask:this._generateMask,mask:s,maskBuffer:this._maskBuffer,opcode:8,readOnly:!1,rsv1:!1};this._deflating?this.enqueue([this.dispatch,o,!1,a,r]):this.sendFrame(d.frame(o,a),r)}ping(e,t,s){let r,o;if("string"==typeof e?(r=Buffer.byteLength(e),o=!1):(r=(e=c(e)).length,o=c.readOnly),r>125)throw new RangeError("The data size must not be greater than 125 bytes");const i={[h]:r,fin:!0,generateMask:this._generateMask,mask:t,maskBuffer:this._maskBuffer,opcode:9,readOnly:o,rsv1:!1};this._deflating?this.enqueue([this.dispatch,e,!1,i,s]):this.sendFrame(d.frame(e,i),s)}pong(e,t,s){let r,o;if("string"==typeof e?(r=Buffer.byteLength(e),o=!1):(r=(e=c(e)).length,o=c.readOnly),r>125)throw new RangeError("The data size must not be greater than 125 bytes");const i={[h]:r,fin:!0,generateMask:this._generateMask,mask:t,maskBuffer:this._maskBuffer,opcode:10,readOnly:o,rsv1:!1};this._deflating?this.enqueue([this.dispatch,e,!1,i,s]):this.sendFrame(d.frame(e,i),s)}send(e,t,s){const r=this._extensions[o.extensionName];let i,n,a=t.binary?2:1,l=t.compress;if("string"==typeof e?(i=Buffer.byteLength(e),n=!1):(i=(e=c(e)).length,n=c.readOnly),this._firstFragment?(this._firstFragment=!1,l&&r&&r.params[r._isServer?"server_no_context_takeover":"client_no_context_takeover"]&&(l=i>=r._threshold),this._compress=l):(l=!1,a=0),t.fin&&(this._firstFragment=!0),r){const r={[h]:i,fin:t.fin,generateMask:this._generateMask,mask:t.mask,maskBuffer:this._maskBuffer,opcode:a,readOnly:n,rsv1:l};this._deflating?this.enqueue([this.dispatch,e,this._compress,r,s]):this.dispatch(e,this._compress,r,s)}else this.sendFrame(d.frame(e,{[h]:i,fin:t.fin,generateMask:this._generateMask,mask:t.mask,maskBuffer:this._maskBuffer,opcode:a,readOnly:n,rsv1:!1}),s)}dispatch(e,t,s,r){if(!t)return void this.sendFrame(d.frame(e,s),r);const i=this._extensions[o.extensionName];this._bufferedBytes+=s[h],this._deflating=!0,i.compress(e,s.fin,((e,t)=>{if(this._socket.destroyed){const e=new Error("The socket was closed while data was being compressed");"function"==typeof r&&r(e);for(let t=0;t<this._queue.length;t++){const s=this._queue[t],r=s[s.length-1];"function"==typeof r&&r(e)}}else this._bufferedBytes-=s[h],this._deflating=!1,s.readOnly=!1,this.sendFrame(d.frame(t,s),r),this.dequeue()}))}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[3][h],Reflect.apply(e[0],this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[3][h],this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],t),this._socket.uncork()):this._socket.write(e[0],t)}}e.exports=d},408:(e,t,s)=>{const{Duplex:r}=s(378);function o(e){e.emit("close")}function i(){!this.destroyed&&this._writableState.finished&&this.destroy()}function n(e){this.removeListener("error",n),this.destroy(),0===this.listenerCount("error")&&this.emit("error",e)}e.exports=function(e,t){let s=!0;const a=new r({...t,autoDestroy:!1,emitClose:!1,objectMode:!1,writableObjectMode:!1});return e.on("message",(function(t,s){const r=!s&&a._readableState.objectMode?t.toString():t;a.push(r)||e.pause()})),e.once("error",(function(e){a.destroyed||(s=!1,a.destroy(e))})),e.once("close",(function(){a.destroyed||a.push(null)})),a._destroy=function(t,r){if(e.readyState===e.CLOSED)return r(t),void process.nextTick(o,a);let i=!1;e.once("error",(function(e){i=!0,r(e)})),e.once("close",(function(){i||r(t),process.nextTick(o,a)})),s&&e.terminate()},a._final=function(t){e.readyState!==e.CONNECTING?null!==e._socket&&(e._socket._writableState.finished?(t(),a._readableState.endEmitted&&a.destroy()):(e._socket.once("finish",(function(){t()})),e.close())):e.once("open",(function(){a._final(t)}))},a._read=function(){e.isPaused&&e.resume()},a._write=function(t,s,r){e.readyState!==e.CONNECTING?e.send(t,r):e.once("open",(function(){a._write(t,s,r)}))},a.on("end",i),a.on("error",n),a}},728:(e,t,s)=>{const{tokenChars:r}=s(708);e.exports={parse:function(e){const t=new Set;let s=-1,o=-1,i=0;for(;i<e.length;i++){const n=e.charCodeAt(i);if(-1===o&&1===r[n])-1===s&&(s=i);else if(0===i||32!==n&&9!==n){if(44!==n)throw new SyntaxError(`Unexpected character at index ${i}`);{if(-1===s)throw new SyntaxError(`Unexpected character at index ${i}`);-1===o&&(o=i);const r=e.slice(s,o);if(t.has(r))throw new SyntaxError(`The "${r}" subprotocol is duplicated`);t.add(r),s=o=-1}}else-1===o&&-1!==s&&(o=i)}if(-1===s||-1!==o)throw new SyntaxError("Unexpected end of input");const n=e.slice(s,i);if(t.has(n))throw new SyntaxError(`The "${n}" subprotocol is duplicated`);return t.add(n),t}}},708:(e,t,s)=>{function r(e){const t=e.length;let s=0;for(;s<t;)if(0==(128&e[s]))s++;else if(192==(224&e[s])){if(s+1===t||128!=(192&e[s+1])||192==(254&e[s]))return!1;s+=2}else if(224==(240&e[s])){if(s+2>=t||128!=(192&e[s+1])||128!=(192&e[s+2])||224===e[s]&&128==(224&e[s+1])||237===e[s]&&160==(224&e[s+1]))return!1;s+=3}else{if(240!=(248&e[s]))return!1;if(s+3>=t||128!=(192&e[s+1])||128!=(192&e[s+2])||128!=(192&e[s+3])||240===e[s]&&128==(240&e[s+1])||244===e[s]&&e[s+1]>143||e[s]>244)return!1;s+=4}return!0}if(e.exports={isValidStatusCode:function(e){return e>=1e3&&e<=1014&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},isValidUTF8:r,tokenChars:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0]},!process.env.WS_NO_UTF_8_VALIDATE)try{const t=s(Object(function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}()));e.exports.isValidUTF8=function(e){return e.length<150?r(e):t(e)}}catch(e){}},796:(e,t,s)=>{const r=s(467),o=s(136),{createHash:i}=(s(256),s(872),s(192),s(968)),n=s(56),a=s(516),c=s(728),h=s(144),{GUID:l,kWebSocket:d}=s(820),f=/^[+/0-9A-Za-z]{22}==$/;function u(e){e._state=2,e.emit("close")}function _(){this.destroy()}function p(e,t,s,r){s=s||o.STATUS_CODES[t],r={Connection:"close","Content-Type":"text/html","Content-Length":Buffer.byteLength(s),...r},e.once("finish",e.destroy),e.end(`HTTP/1.1 ${t} ${o.STATUS_CODES[t]}\r\n`+Object.keys(r).map((e=>`${e}: ${r[e]}`)).join("\r\n")+"\r\n\r\n"+s)}function m(e,t,s,r,o){if(e.listenerCount("wsClientError")){const r=new Error(o);Error.captureStackTrace(r,m),e.emit("wsClientError",r,s,t)}else p(s,r,o)}e.exports=class extends r{constructor(e,t){if(super(),null==(e={maxPayload:104857600,skipUTF8Validation:!1,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null,WebSocket:h,...e}).port&&!e.server&&!e.noServer||null!=e.port&&(e.server||e.noServer)||e.server&&e.noServer)throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');if(null!=e.port?(this._server=o.createServer(((e,t)=>{const s=o.STATUS_CODES[426];t.writeHead(426,{"Content-Length":s.length,"Content-Type":"text/plain"}),t.end(s)})),this._server.listen(e.port,e.host,e.backlog,t)):e.server&&(this._server=e.server),this._server){const e=this.emit.bind(this,"connection");this._removeListeners=function(e,t){for(const s of Object.keys(t))e.on(s,t[s]);return function(){for(const s of Object.keys(t))e.removeListener(s,t[s])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(t,s,r)=>{this.handleUpgrade(t,s,r,e)}})}!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set,this._shouldEmitClose=!1),this.options=e,this._state=0}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(2===this._state)return e&&this.once("close",(()=>{e(new Error("The server is not running"))})),void process.nextTick(u,this);if(e&&this.once("close",e),1!==this._state)if(this._state=1,this.options.noServer||this.options.server)this._server&&(this._removeListeners(),this._removeListeners=this._server=null),this.clients&&this.clients.size?this._shouldEmitClose=!0:process.nextTick(u,this);else{const e=this._server;this._removeListeners(),this._removeListeners=this._server=null,e.close((()=>{u(this)}))}}shouldHandle(e){if(this.options.path){const t=e.url.indexOf("?");if((-1!==t?e.url.slice(0,t):e.url)!==this.options.path)return!1}return!0}handleUpgrade(e,t,s,r){t.on("error",_);const o=e.headers["sec-websocket-key"],i=+e.headers["sec-websocket-version"];if("GET"!==e.method)return void m(this,e,t,405,"Invalid HTTP method");if("websocket"!==e.headers.upgrade.toLowerCase())return void m(this,e,t,400,"Invalid Upgrade header");if(!o||!f.test(o))return void m(this,e,t,400,"Missing or invalid Sec-WebSocket-Key header");if(8!==i&&13!==i)return void m(this,e,t,400,"Missing or invalid Sec-WebSocket-Version header");if(!this.shouldHandle(e))return void p(t,400);const h=e.headers["sec-websocket-protocol"];let l=new Set;if(void 0!==h)try{l=c.parse(h)}catch(s){return void m(this,e,t,400,"Invalid Sec-WebSocket-Protocol header")}const d=e.headers["sec-websocket-extensions"],u={};if(this.options.perMessageDeflate&&void 0!==d){const s=new a(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const e=n.parse(d);e[a.extensionName]&&(s.accept(e[a.extensionName]),u[a.extensionName]=s)}catch(s){return void m(this,e,t,400,"Invalid or unacceptable Sec-WebSocket-Extensions header")}}if(this.options.verifyClient){const n={origin:e.headers[8===i?"sec-websocket-origin":"origin"],secure:!(!e.socket.authorized&&!e.socket.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(n,((i,n,a,c)=>{if(!i)return p(t,n||401,a,c);this.completeUpgrade(u,o,l,e,t,s,r)}));if(!this.options.verifyClient(n))return p(t,401)}this.completeUpgrade(u,o,l,e,t,s,r)}completeUpgrade(e,t,s,r,o,c,h){if(!o.readable||!o.writable)return o.destroy();if(o[d])throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");if(this._state>0)return p(o,503);const f=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${i("sha1").update(t+l).digest("base64")}`],m=new this.options.WebSocket(null);if(s.size){const e=this.options.handleProtocols?this.options.handleProtocols(s,r):s.values().next().value;e&&(f.push(`Sec-WebSocket-Protocol: ${e}`),m._protocol=e)}if(e[a.extensionName]){const t=e[a.extensionName].params,s=n.format({[a.extensionName]:[t]});f.push(`Sec-WebSocket-Extensions: ${s}`),m._extensions=e}this.emit("headers",f,r),o.write(f.concat("\r\n").join("\r\n")),o.removeListener("error",_),m.setSocket(o,c,{maxPayload:this.options.maxPayload,skipUTF8Validation:this.options.skipUTF8Validation}),this.clients&&(this.clients.add(m),m.on("close",(()=>{this.clients.delete(m),this._shouldEmitClose&&!this.clients.size&&process.nextTick(u,this)}))),h(m,r)}}},144:(e,t,s)=>{const r=s(467),o=s(256),i=s(136),n=s(872),a=s(192),{randomBytes:c,createHash:h}=s(968),{Readable:l}=s(378),{URL:d}=s(716),f=s(516),u=s(804),_=s(957),{BINARY_TYPES:p,EMPTY_BUFFER:m,GUID:y,kForOnEventAttribute:g,kListener:v,kStatusCode:b,kWebSocket:S,NOOP:w}=s(820),{EventTarget:{addEventListener:k,removeEventListener:x}}=s(584),{format:E,parse:O}=s(56),{toBuffer:N}=s(92),C=Symbol("kAborted"),T=[8,13],P=["CONNECTING","OPEN","CLOSING","CLOSED"],L=/^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;class R extends r{constructor(e,t,s){super(),this._binaryType=p[0],this._closeCode=1006,this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage=m,this._closeTimer=null,this._extensions={},this._paused=!1,this._protocol="",this._readyState=R.CONNECTING,this._receiver=null,this._sender=null,this._socket=null,null!==e?(this._bufferedAmount=0,this._isServer=!1,this._redirects=0,void 0===t?t=[]:Array.isArray(t)||("object"==typeof t&&null!==t?(s=t,t=[]):t=[t]),U(this,e,t,s)):this._isServer=!0}get binaryType(){return this._binaryType}set binaryType(e){p.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?this._socket._writableState.length+this._sender._bufferedBytes:this._bufferedAmount}get extensions(){return Object.keys(this._extensions).join()}get isPaused(){return this._paused}get onclose(){return null}get onerror(){return null}get onopen(){return null}get onmessage(){return null}get protocol(){return this._protocol}get readyState(){return this._readyState}get url(){return this._url}setSocket(e,t,s){const r=new u({binaryType:this.binaryType,extensions:this._extensions,isServer:this._isServer,maxPayload:s.maxPayload,skipUTF8Validation:s.skipUTF8Validation});this._sender=new _(e,this._extensions,s.generateMask),this._receiver=r,this._socket=e,r[S]=this,e[S]=this,r.on("conclude",A),r.on("drain",j),r.on("error",F),r.on("message",G),r.on("ping",V),r.on("pong",q),e.setTimeout(0),e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",H),e.on("data",J),e.on("end",Y),e.on("error",X),this._readyState=R.OPEN,this.emit("open")}emitClose(){if(!this._socket)return this._readyState=R.CLOSED,void this.emit("close",this._closeCode,this._closeMessage);this._extensions[f.extensionName]&&this._extensions[f.extensionName].cleanup(),this._receiver.removeAllListeners(),this._readyState=R.CLOSED,this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==R.CLOSED){if(this.readyState===R.CONNECTING){const e="WebSocket was closed before the connection was established";return I(this,this._req,e)}this.readyState!==R.CLOSING?(this._readyState=R.CLOSING,this._sender.close(e,t,!this._isServer,(e=>{e||(this._closeFrameSent=!0,(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end())})),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),3e4)):this._closeFrameSent&&(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end()}}pause(){this.readyState!==R.CONNECTING&&this.readyState!==R.CLOSED&&(this._paused=!0,this._socket.pause())}ping(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===R.OPEN?(void 0===t&&(t=!this._isServer),this._sender.ping(e||m,t,s)):D(this,e,s)}pong(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===R.OPEN?(void 0===t&&(t=!this._isServer),this._sender.pong(e||m,t,s)):D(this,e,s)}resume(){this.readyState!==R.CONNECTING&&this.readyState!==R.CLOSED&&(this._paused=!1,this._receiver._writableState.needDrain||this._socket.resume())}send(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if("function"==typeof t&&(s=t,t={}),"number"==typeof e&&(e=e.toString()),this.readyState!==R.OPEN)return void D(this,e,s);const r={binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0,...t};this._extensions[f.extensionName]||(r.compress=!1),this._sender.send(e||m,r,s)}terminate(){if(this.readyState!==R.CLOSED){if(this.readyState===R.CONNECTING){const e="WebSocket was closed before the connection was established";return I(this,this._req,e)}this._socket&&(this._readyState=R.CLOSING,this._socket.destroy())}}}function U(e,t,s,r){const n={protocolVersion:T[1],maxPayload:104857600,skipUTF8Validation:!1,perMessageDeflate:!0,followRedirects:!1,maxRedirects:10,...r,createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:"GET",host:void 0,path:void 0,port:void 0};if(!T.includes(n.protocolVersion))throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${T.join(", ")})`);let a;if(t instanceof d)a=t,e._url=t.href;else{try{a=new d(t)}catch(e){throw new SyntaxError(`Invalid URL: ${t}`)}e._url=t}const l="wss:"===a.protocol,u="ws+unix:"===a.protocol;let _;if("ws:"===a.protocol||l||u?u&&!a.pathname?_="The URL's pathname is empty":a.hash&&(_="The URL contains a fragment identifier"):_='The URL\'s protocol must be one of "ws:", "wss:", or "ws+unix:"',_){const t=new SyntaxError(_);if(0===e._redirects)throw t;return void W(e,t)}const p=l?443:80,m=c(16).toString("base64"),g=l?o.request:i.request,v=new Set;let b,S;if(n.createConnection=l?M:B,n.defaultPort=n.defaultPort||p,n.port=a.port||p,n.host=a.hostname.startsWith("[")?a.hostname.slice(1,-1):a.hostname,n.headers={"Sec-WebSocket-Version":n.protocolVersion,"Sec-WebSocket-Key":m,Connection:"Upgrade",Upgrade:"websocket",...n.headers},n.path=a.pathname+a.search,n.timeout=n.handshakeTimeout,n.perMessageDeflate&&(b=new f(!0!==n.perMessageDeflate?n.perMessageDeflate:{},!1,n.maxPayload),n.headers["Sec-WebSocket-Extensions"]=E({[f.extensionName]:b.offer()})),s.length){for(const e of s){if("string"!=typeof e||!L.test(e)||v.has(e))throw new SyntaxError("An invalid or duplicated subprotocol was specified");v.add(e)}n.headers["Sec-WebSocket-Protocol"]=s.join(",")}if(n.origin&&(n.protocolVersion<13?n.headers["Sec-WebSocket-Origin"]=n.origin:n.headers.Origin=n.origin),(a.username||a.password)&&(n.auth=`${a.username}:${a.password}`),u){const e=n.path.split(":");n.socketPath=e[0],n.path=e[1]}if(n.followRedirects){if(0===e._redirects){e._originalSecure=l,e._originalHost=a.host;const t=r&&r.headers;if(r={...r,headers:{}},t)for(const[e,s]of Object.entries(t))r.headers[e.toLowerCase()]=s}else if(0===e.listenerCount("redirect")){const t=a.host===e._originalHost;(!t||e._originalSecure&&!l)&&(delete n.headers.authorization,delete n.headers.cookie,t||delete n.headers.host,n.auth=void 0)}n.auth&&!r.headers.authorization&&(r.headers.authorization="Basic "+Buffer.from(n.auth).toString("base64")),S=e._req=g(n),e._redirects&&e.emit("redirect",e.url,S)}else S=e._req=g(n);n.timeout&&S.on("timeout",(()=>{I(e,S,"Opening handshake has timed out")})),S.on("error",(t=>{null===S||S[C]||(S=e._req=null,W(e,t))})),S.on("response",(o=>{const i=o.headers.location,a=o.statusCode;if(i&&n.followRedirects&&a>=300&&a<400){if(++e._redirects>n.maxRedirects)return void I(e,S,"Maximum redirects exceeded");let o;S.abort();try{o=new d(i,t)}catch(t){const s=new SyntaxError(`Invalid URL: ${i}`);return void W(e,s)}U(e,o,s,r)}else e.emit("unexpected-response",S,o)||I(e,S,`Unexpected server response: ${o.statusCode}`)})),S.on("upgrade",((t,s,r)=>{if(e.emit("upgrade",t),e.readyState!==R.CONNECTING)return;if(S=e._req=null,"websocket"!==t.headers.upgrade.toLowerCase())return void I(e,s,"Invalid Upgrade header");const o=h("sha1").update(m+y).digest("base64");if(t.headers["sec-websocket-accept"]!==o)return void I(e,s,"Invalid Sec-WebSocket-Accept header");const i=t.headers["sec-websocket-protocol"];let a;if(void 0!==i?v.size?v.has(i)||(a="Server sent an invalid subprotocol"):a="Server sent a subprotocol but none was requested":v.size&&(a="Server sent no subprotocol"),a)return void I(e,s,a);i&&(e._protocol=i);const c=t.headers["sec-websocket-extensions"];if(void 0!==c){if(!b)return void I(e,s,"Server sent a Sec-WebSocket-Extensions header but no extension was requested");let t;try{t=O(c)}catch(t){return void I(e,s,"Invalid Sec-WebSocket-Extensions header")}const r=Object.keys(t);if(1!==r.length||r[0]!==f.extensionName)return void I(e,s,"Server indicated an extension that was not requested");try{b.accept(t[f.extensionName])}catch(t){return void I(e,s,"Invalid Sec-WebSocket-Extensions header")}e._extensions[f.extensionName]=b}e.setSocket(s,r,{generateMask:n.generateMask,maxPayload:n.maxPayload,skipUTF8Validation:n.skipUTF8Validation})})),S.end()}function W(e,t){e._readyState=R.CLOSING,e.emit("error",t),e.emitClose()}function B(e){return e.path=e.socketPath,n.connect(e)}function M(e){return e.path=void 0,e.servername||""===e.servername||(e.servername=n.isIP(e.host)?"":e.host),a.connect(e)}function I(e,t,s){e._readyState=R.CLOSING;const r=new Error(s);Error.captureStackTrace(r,I),t.setHeader?(t[C]=!0,t.abort(),t.socket&&!t.socket.destroyed&&t.socket.destroy(),process.nextTick(W,e,r)):(t.destroy(r),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function D(e,t,s){if(t){const s=N(t).length;e._socket?e._sender._bufferedBytes+=s:e._bufferedAmount+=s}s&&s(new Error(`WebSocket is not open: readyState ${e.readyState} (${P[e.readyState]})`))}function A(e,t){const s=this[S];s._closeFrameReceived=!0,s._closeMessage=t,s._closeCode=e,void 0!==s._socket[S]&&(s._socket.removeListener("data",J),process.nextTick(z,s._socket),1005===e?s.close():s.close(e,t))}function j(){const e=this[S];e.isPaused||e._socket.resume()}function F(e){const t=this[S];void 0!==t._socket[S]&&(t._socket.removeListener("data",J),process.nextTick(z,t._socket),t.close(e[b])),t.emit("error",e)}function $(){this[S].emitClose()}function G(e,t){this[S].emit("message",e,t)}function V(e){const t=this[S];t.pong(e,!t._isServer,w),t.emit("ping",e)}function q(e){this[S].emit("pong",e)}function z(e){e.resume()}function H(){const e=this[S];let t;this.removeListener("close",H),this.removeListener("data",J),this.removeListener("end",Y),e._readyState=R.CLOSING,this._readableState.endEmitted||e._closeFrameReceived||e._receiver._writableState.errorEmitted||null===(t=e._socket.read())||e._receiver.write(t),e._receiver.end(),this[S]=void 0,clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",$),e._receiver.on("finish",$))}function J(e){this[S]._receiver.write(e)||this.pause()}function Y(){const e=this[S];e._readyState=R.CLOSING,e._receiver.end(),this.end()}function X(){const e=this[S];this.removeListener("error",X),this.on("error",w),e&&(e._readyState=R.CLOSING,this.destroy())}Object.defineProperty(R,"CONNECTING",{enumerable:!0,value:P.indexOf("CONNECTING")}),Object.defineProperty(R.prototype,"CONNECTING",{enumerable:!0,value:P.indexOf("CONNECTING")}),Object.defineProperty(R,"OPEN",{enumerable:!0,value:P.indexOf("OPEN")}),Object.defineProperty(R.prototype,"OPEN",{enumerable:!0,value:P.indexOf("OPEN")}),Object.defineProperty(R,"CLOSING",{enumerable:!0,value:P.indexOf("CLOSING")}),Object.defineProperty(R.prototype,"CLOSING",{enumerable:!0,value:P.indexOf("CLOSING")}),Object.defineProperty(R,"CLOSED",{enumerable:!0,value:P.indexOf("CLOSED")}),Object.defineProperty(R.prototype,"CLOSED",{enumerable:!0,value:P.indexOf("CLOSED")}),["binaryType","bufferedAmount","extensions","isPaused","protocol","readyState","url"].forEach((e=>{Object.defineProperty(R.prototype,e,{enumerable:!0})})),["open","error","close","message"].forEach((e=>{Object.defineProperty(R.prototype,`on${e}`,{enumerable:!0,get(){for(const t of this.listeners(e))if(t[g])return t[v];return null},set(t){for(const t of this.listeners(e))if(t[g]){this.removeListener(e,t);break}"function"==typeof t&&this.addEventListener(e,t,{[g]:!0})}})})),R.prototype.addEventListener=k,R.prototype.removeEventListener=x,e.exports=R},968:e=>{e.exports=require("crypto")},467:e=>{e.exports=require("events")},58:e=>{e.exports=require("fs")},136:e=>{e.exports=require("http")},256:e=>{e.exports=require("https")},872:e=>{e.exports=require("net")},72:e=>{e.exports=require("path")},378:e=>{e.exports=require("stream")},192:e=>{e.exports=require("tls")},716:e=>{e.exports=require("url")},592:e=>{e.exports=require("zlib")}},t={};!function s(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}(148)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,